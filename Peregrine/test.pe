#if you want to take a look at the syntax then check can_comp.pe 
#this file is just for testing the parser and the syntax may not be valid
val = [45, 3]
val2 = cast<int>(val)

while True:
    pass
def test(a,b):
    raise
for x in y:
    for i , j in x:
        pass

c = [3, 54, 76]
c[2] = 4

a = 23
test = &a

b = *test + 56

arr = [2, 65]
def hey(a: [2]int):
    2 + 4

hey(arr)
with c:
    pass
with x as c:
    pass
with x as c,y as u:
    pass
class test(parent1,parent2):
    "multi line
    comment"
    "test"
    a :float = 5.6
    b :int = cast<int>(a)+8
    c:*int=&b
    static d=0
    union gg:
        x:int
        y:int
    class nested_class:
        a=8
    def sub(a:int,b:int) -> int:
        return self.a - self.b
    inline def div():
        return self.a / self.b
    static inline def pow():
        return self.a ** self.b
    virtual def multi(a:int,b:int) -> int:
        return self.a * self.b

def test_x(a=0,b:int=9):
    pass
test_x(7)

static const gg=5
static const gg:int=5

export def test2():
    pass

union n:
  "comment1"
  "comment""comment
  comment"
  g:int
x = 3 if a==2 else 0
scope:
  pass
def v():pass
for x in y:pass
while True:pass
scope:pass
if True:pass
elif False:pass
elif True:pass
else:pass
enum b:x,h=0
with x as y:pass
match x:
    case t:
        pass
    case y:pass
    default:pass
i++
i--
def v():
    return 1,2
try:
    pass
except a:
    pass
except a as b:
    pass
except a,c as b:
    pass
except:
    pass
a:i.h.g=0
a:int
type p=def()->a,a
def i()->p,int:
    return 1,3
type turple_test=(int,int)
a:turple_test=(1,2)
extern c=import("test1","test2")
a,b,c.d=1,2+3,3
(a,b),c.d=(1,2+3),3
a**=b
x:&int=adsa
x.b=9
*a=4
def (i:int)method(a:int,b:int):return a+b
def (i)method(a:int,b:int):return a+b
def c.exit(int)
def c.test(int)->int
union c.incomplete_external_union
union c.complete_external_union:
    "Random comment"
    a:int
class c.incomplete_external_struct
class c.complete_external_struct:
    "Random comment"
    a:int

print("Hello World") 
def x(...m):
    return m
def x(*m):
    return m
def x(**m):
    return m
def x(...):
    return m

type testing = def(*)->int
type _1 = def(**)->int
type _2 = def(...)->int
type _3 = def(*ptr)->int
type _5 = def(**ptr)->int
type _6 = def(_1,_2)->int

def (const i)method(const a:int,const x)->int:
    return a+i
$if windows:
    $for i in 0..10:
        print($i)
x=5..5 if False else 6

g=[4 for i in 0..10 ]
class x:
    private static x=2
    private static const x=2
    private static def (i:int)method(a:int,b:int):
        return a+b
__asm__:
    ";your assambly code here"
    "0"=reg_value
__asm__:
    res=";your assambly code here"
    "0"=reg_value
import os1
import os2,sys6
import os3 as f8,sys8 as dec6
import os4 as t8
from os5 import t as d8,y6
from os6 import t8 as y8 ,yy as u8
from os7 import t6,y0
from os8 import t86
$if False:
    pass
$elif False:
    pass
$elif False:
    pass
$else:
    ...

$if False:
    pass
$else:
    ...

type x{T}=def(T)->T
type x{T,R}=def(T)->T,R

class x{T}:
    union u{T}:
        a:T
        b:T
    union u{T1,T2}:
        a:T2
        b:T1
    def x{T1}():
        pass
    def x{T1,T2}():
        pass
def (i:int)x{T1}():
    pass
@decorator
def (i:int)x{T1,T2}():
    pass
class x{T,R}:
    union u{T}:
        a:T
        b:T
    union u{T1,T2}:
        a:T2
        b:T1
    def x{T1}():
        pass
    @decorator_in_class
    def x{T1,T2}():
        pass
def (i:int)x{T1}():
    pass
def (i:int)x{T1,T2}():
    pass
from x import *
lambda_test = def(x:int):x*x
var1 |> methord1 |> methord2 
func{int}()+9
a:generic{T1,T2}= 0
type sumtype=int|float|*int|[]int|generic{int,int}
